Fundamentals of Web Components

<my-tooltip text="Extra Info">What?</my-tooltip>

============

------------

=============
Custom HTML
-------------

"Custom HTML Element" -> 3 Core Elements
1. Custom HTML Element - Register your own HTML tags.

2. Shadow DOM specification - Features to create our own DOM tree, elements behind elements
Hidden from the main DOM. Manage a seperate DOM node tree for your HTML elements, including
scoped CSS styles

3. Templates & Slots
Let us define our own HTML structure, behind our custom element. Add flexible entry points (slots) 
where we can pass in information from outside when used in an app. 

4. HTML Imports
Import HTML files into HTML files **NOT CONTINUED SPEC**

=============
Browser Supprt
--------------
webcomponents.org has entire browser support table
caniuse.com also has list of custom elements


============
Core Custom Elements
------------

1. Autonomous Elements
Independant of all HTML elements built into browser

2. Extend Built-in Elements
Extend functions of some elements into customs

============
Creating a Custom Element
------------

Create a class of your element via HTMLElement class
class Tooltip extends HTMLElement {
  constructor(){
    ....
  }
}


customElements.define(')
1st Arg - string of the name of the custom element, one word, seperated by a dash. CANNOT BE A SINGLE word
to avoid overwriting elements. HAS TO HAVE A DASH. 
Often have a prefix that has a unique name, with no chance of clashing names. Ex. tad-tooltip

==========

All elements will be made up of 'primitives', or pre-existing, standard HTML components, but are wholly defined of composed logic that encapsulates one component, made up of many. 

============
Custom Web Component Lifecycle
------------

Instantiation of component

Element created -> constructor() (created in memory, not in DOM. Basic initializations)

Element Attached to DOM -> connectedCallback() - Where you can start adding content 
or accessing the DOM (DOM initializations)

Element detached from DOM -> disconnectedCallback() -> cleanup work, HTTP request, 
cancel

Observed Attribute Updated -> attributeChangedCallback() -> listening for changes to attributes in your element,
where you update data and DOM of component when attr change, once passed to element.

============
Attributes vs. Properties 
------------

First of all, it's important to understand that the browser essentially "translates" your HTML code 
to a tree of DOM nodes (= objects if you access them in JavaScript).

DOM properties and HTML attributes CAN be related, but also don't have to!

Attributes                Properties
<imput value="...">     input.value = "..."
Set in HTML/DOM         Set programatically on JS OBJ
========== Often, but not always linked to a propery ===========
========== Not necessarily in sync with linked propery ===========


============
Shadow DOM!
------------
Anything contained within a custom component should generally he hidden from standard DOM,
as this could be a problem for styling and other side effects imposed by normal DOM.  
->Best to create your own component DOM tree : our element should have its own DOM behind it,
but is not directly connected to normal/light DOM.

How?

Within constructor, call: this.attachShadow({mode: 'open' })  'open' means accessible, 
'closed' not accessible, but infrequently used.

**Children then need to be appended to the shadowDOM at the end, not normal DOM! 
Must use: this.shadowRoot.appendChid(child)**
Appending or removing is done by this.shadowRoot.append....

<slot> displays whatever you pass in between your opening and closing custom element tags.  

Default -> anything you pass in between slot tags will be the default

